{"ast":null,"code":"export async function main({\n  webglApi,\n  dataJsApi,\n  canvas\n}) {\n  // Initialize the data API with the Novorender data server service\n  const dataApi = dataJsApi.createAPI({\n    serviceUrl: \"https://data.novorender.com/api\"\n  });\n  try {\n    // Load scene metadata\n    const sceneData = await dataApi\n    // Condos scene ID, but can be changed to any public scene ID\n    .loadScene(\"3b5e65560dc4422da5c7c3f827b6a77c\").then(res => {\n      if (\"error\" in res) {\n        throw res;\n      } else {\n        return res;\n      }\n    });\n\n    // Destructure relevant properties into variables\n    const {\n      url,\n      db,\n      settings,\n      camera: cameraParams\n    } = sceneData;\n\n    // initialize webgl api\n    const api = webglApi.createAPI();\n\n    // Load scene\n    const scene = await api.loadScene(url, db);\n\n    // The code above is all you need to load the scene,\n    // however there is more scene data loaded that you can apply\n\n    // Create a view with the scene's saved settings\n    const view = await api.createView(settings, canvas);\n\n    // Set resolution scale to 1\n    view.applySettings({\n      quality: {\n        resolution: {\n          value: 1\n        }\n      }\n    });\n\n    // Create a camera controller with the saved parameters with turntable as fallback\n    // available controller types are static, orbit, flight and turntable\n    const camera = cameraParams !== null && cameraParams !== void 0 ? cameraParams : {\n      kind: \"turntable\"\n    };\n    view.camera.controller = api.createCameraController(camera, canvas);\n\n    // Assign the scene to the view\n    view.scene = scene;\n\n    // Run render loop and the resizeObserver\n    run(view, canvas);\n  } catch (e) {\n    // Handle errors however you like\n    console.warn(e);\n  }\n}","map":{"version":3,"names":["main","webglApi","dataJsApi","canvas","dataApi","createAPI","serviceUrl","sceneData","loadScene","then","res","url","db","settings","camera","cameraParams","api","scene","view","createView","applySettings","quality","resolution","value","kind","controller","createCameraController","run","e","console","warn"],"sources":["/Users/nanhomkham/IdeaProjects/novorender-ui/src/scenes/condos.ts"],"sourcesContent":["export async function main({ webglApi, dataJsApi, canvas }: IParams) {\n  // Initialize the data API with the Novorender data server service\n  const dataApi = dataJsApi.createAPI({\n    serviceUrl: \"https://data.novorender.com/api\",\n  });\n\n  try {\n    // Load scene metadata\n    const sceneData = await dataApi\n      // Condos scene ID, but can be changed to any public scene ID\n      .loadScene(\"3b5e65560dc4422da5c7c3f827b6a77c\")\n      .then((res) => {\n        if (\"error\" in res) {\n          throw res;\n        } else {\n          return res;\n        }\n      });\n\n    // Destructure relevant properties into variables\n    const { url, db, settings, camera: cameraParams } = sceneData;\n\n    // initialize webgl api\n    const api = webglApi.createAPI();\n\n    // Load scene\n    const scene = await api.loadScene(url, db);\n\n    // The code above is all you need to load the scene,\n    // however there is more scene data loaded that you can apply\n\n    // Create a view with the scene's saved settings\n    const view = await api.createView(settings, canvas);\n\n    // Set resolution scale to 1\n    view.applySettings({ quality: { resolution: { value: 1 } } });\n\n    // Create a camera controller with the saved parameters with turntable as fallback\n    // available controller types are static, orbit, flight and turntable\n    const camera = cameraParams ?? ({ kind: \"turntable\" } as any);\n    view.camera.controller = api.createCameraController(camera, canvas);\n\n    // Assign the scene to the view\n    view.scene = scene;\n\n    // Run render loop and the resizeObserver\n    run(view, canvas);\n  } catch (e) {\n    // Handle errors however you like\n    console.warn(e);\n  }\n}"],"mappings":"AAAA,OAAO,eAAeA,IAAIA,CAAC;EAAEC,QAAQ;EAAEC,SAAS;EAAEC;AAAgB,CAAC,EAAE;EACnE;EACA,MAAMC,OAAO,GAAGF,SAAS,CAACG,SAAS,CAAC;IAClCC,UAAU,EAAE;EACd,CAAC,CAAC;EAEF,IAAI;IACF;IACA,MAAMC,SAAS,GAAG,MAAMH;IACtB;IAAA,CACCI,SAAS,CAAC,kCAAkC,CAAC,CAC7CC,IAAI,CAAEC,GAAG,IAAK;MACb,IAAI,OAAO,IAAIA,GAAG,EAAE;QAClB,MAAMA,GAAG;MACX,CAAC,MAAM;QACL,OAAOA,GAAG;MACZ;IACF,CAAC,CAAC;;IAEJ;IACA,MAAM;MAAEC,GAAG;MAAEC,EAAE;MAAEC,QAAQ;MAAEC,MAAM,EAAEC;IAAa,CAAC,GAAGR,SAAS;;IAE7D;IACA,MAAMS,GAAG,GAAGf,QAAQ,CAACI,SAAS,CAAC,CAAC;;IAEhC;IACA,MAAMY,KAAK,GAAG,MAAMD,GAAG,CAACR,SAAS,CAACG,GAAG,EAAEC,EAAE,CAAC;;IAE1C;IACA;;IAEA;IACA,MAAMM,IAAI,GAAG,MAAMF,GAAG,CAACG,UAAU,CAACN,QAAQ,EAAEV,MAAM,CAAC;;IAEnD;IACAe,IAAI,CAACE,aAAa,CAAC;MAAEC,OAAO,EAAE;QAAEC,UAAU,EAAE;UAAEC,KAAK,EAAE;QAAE;MAAE;IAAE,CAAC,CAAC;;IAE7D;IACA;IACA,MAAMT,MAAM,GAAGC,YAAY,aAAZA,YAAY,cAAZA,YAAY,GAAK;MAAES,IAAI,EAAE;IAAY,CAAS;IAC7DN,IAAI,CAACJ,MAAM,CAACW,UAAU,GAAGT,GAAG,CAACU,sBAAsB,CAACZ,MAAM,EAAEX,MAAM,CAAC;;IAEnE;IACAe,IAAI,CAACD,KAAK,GAAGA,KAAK;;IAElB;IACAU,GAAG,CAACT,IAAI,EAAEf,MAAM,CAAC;EACnB,CAAC,CAAC,OAAOyB,CAAC,EAAE;IACV;IACAC,OAAO,CAACC,IAAI,CAACF,CAAC,CAAC;EACjB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}