{"ast":null,"code":"import * as NovoRender from \"@novorender/webgl-api\";\nexport async function main(canvas) {\n  // Create API\n  const api = NovoRender.createAPI();\n\n  // Create a view\n  const view = await api.createView({\n    background: {\n      color: [0, 0, 0.25, 1]\n    }\n  }, canvas);\n\n  // load a predefined scene into the view, available views are cube, oilrig, condos\n  view.scene = await api.loadScene('https://api.novorender.com/assets/scenes/18f56c98c1e748feb8369a6d32fde9ef/');\n\n  // provide a controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({\n    kind: \"turntable\"\n  });\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // render-loop https://dens.website/tutorials/webgl/render-loop\n  while (true) {\n    const {\n      clientWidth: width,\n      clientHeight: height\n    } = canvas;\n    // handle resizes\n    view.applySettings({\n      display: {\n        width,\n        height\n      }\n    });\n    const output = await view.render();\n    {\n      const image = await output.getImage();\n      if (image && ctx) {\n        // display in canvas\n        ctx.transferFromImageBitmap(image);\n      }\n    }\n    output.dispose();\n  }\n}","map":{"version":3,"names":["NovoRender","main","canvas","api","createAPI","view","createView","background","color","scene","loadScene","camera","controller","createCameraController","kind","ctx","getContext","clientWidth","width","clientHeight","height","applySettings","display","output","render","image","getImage","transferFromImageBitmap","dispose"],"sources":["/Users/nanhomkham/IdeaProjects/novorender-ui/src/scenes/condos.ts"],"sourcesContent":["import * as NovoRender from \"@novorender/webgl-api\";\n\nexport async function main(canvas: HTMLCanvasElement) {\n  // Create API\n  const api = NovoRender.createAPI();\n\n  // Create a view\n  const view = await api.createView(\n    { background: { color: [0, 0, 0.25, 1] } },\n    canvas\n  );\n\n  // load a predefined scene into the view, available views are cube, oilrig, condos\n  view.scene = await api.loadScene('https://api.novorender.com/assets/scenes/18f56c98c1e748feb8369a6d32fde9ef/');\n\n  // provide a controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({ kind: \"turntable\" });\n\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // render-loop https://dens.website/tutorials/webgl/render-loop\n  while (true) {\n    const { clientWidth: width, clientHeight: height } = canvas;\n    // handle resizes\n    view.applySettings({ display: { width, height } });\n    const output = await view.render();\n\n    {\n      const image = await output.getImage();\n      if (image && ctx) {\n        // display in canvas\n        ctx.transferFromImageBitmap(image);\n      }\n    }\n    (output as any).dispose();\n  }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,UAAU,MAAM,uBAAuB;AAEnD,OAAO,eAAeC,IAAIA,CAACC,MAAyB,EAAE;EACpD;EACA,MAAMC,GAAG,GAAGH,UAAU,CAACI,SAAS,CAAC,CAAC;;EAElC;EACA,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,UAAU,CAC/B;IAAEC,UAAU,EAAE;MAAEC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC;IAAE;EAAE,CAAC,EAC1CN,MACF,CAAC;;EAED;EACAG,IAAI,CAACI,KAAK,GAAG,MAAMN,GAAG,CAACO,SAAS,CAAC,4EAA4E,CAAC;;EAE9G;EACAL,IAAI,CAACM,MAAM,CAACC,UAAU,GAAGT,GAAG,CAACU,sBAAsB,CAAC;IAAEC,IAAI,EAAE;EAAY,CAAC,CAAC;EAE1E,MAAMC,GAAG,GAAGb,MAAM,CAACc,UAAU,CAAC,gBAAgB,CAAC;;EAE/C;EACA,OAAO,IAAI,EAAE;IACX,MAAM;MAAEC,WAAW,EAAEC,KAAK;MAAEC,YAAY,EAAEC;IAAO,CAAC,GAAGlB,MAAM;IAC3D;IACAG,IAAI,CAACgB,aAAa,CAAC;MAAEC,OAAO,EAAE;QAAEJ,KAAK;QAAEE;MAAO;IAAE,CAAC,CAAC;IAClD,MAAMG,MAAM,GAAG,MAAMlB,IAAI,CAACmB,MAAM,CAAC,CAAC;IAElC;MACE,MAAMC,KAAK,GAAG,MAAMF,MAAM,CAACG,QAAQ,CAAC,CAAC;MACrC,IAAID,KAAK,IAAIV,GAAG,EAAE;QAChB;QACAA,GAAG,CAACY,uBAAuB,CAACF,KAAK,CAAC;MACpC;IACF;IACCF,MAAM,CAASK,OAAO,CAAC,CAAC;EAC3B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}