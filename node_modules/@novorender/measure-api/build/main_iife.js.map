{
  "version": 3,
  "sources": ["../src/index.ts", "../node_modules/comlink/src/comlink.ts", "../node_modules/gl-matrix/esm/common.js", "../node_modules/gl-matrix/esm/mat4.js", "../node_modules/gl-matrix/esm/vec3.js", "../node_modules/gl-matrix/esm/vec4.js", "../node_modules/gl-matrix/esm/vec2.js", "../src/measureError.ts", "../src/measureScene.ts", "../src/calculations2d.ts", "../src/drawobject_factory.ts", "../src/pathRender.ts", "../src/measureApi.ts", "../src/measureEntity.ts", "../src/measureObject.ts"],
  "sourcesContent": ["import { MeasureAPI } from \"./measureApi\";\nexport { MeasureAPI };\n\nexport * from \"./measureObject\";\nexport * from \"./measureScene\";\nexport * from \"./measureEntity\";\nexport * from \"./measureApi\";\nexport * from \"./pathRender\";\nexport * from \"./measureError\";\n\nexport const cylinderOptions = [\n  \"center\",\n  \"closest\",\n  \"furthest\",\n  \"top\",\n  \"bottom\",\n] as const;\n\nexport type CylinderOptions = typeof cylinderOptions;\n\nexport function createMeasureAPI(scriptBaseUrl?: string) {\n  return new MeasureAPI(scriptBaseUrl);\n}\n", "/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nexport function expose(obj: any, ep: Endpoint = self as any) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n        }\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: MessageType.RELEASE,\n            path: path.map((p) => p.toString()),\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously \u00AF\\_(\u30C4)_/\u00AF\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn\u2019t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = self,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n", "/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;", "import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();", "import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();", "export class MeasureError extends Error {\n  constructor(readonly type: string, message: string) {\n    super(message);\n  }\n}\n", "import type * as Comlink from \"comlink\";\nimport {\n  glMatrix,\n  ReadonlyVec2,\n  ReadonlyVec3,\n  vec2,\n  vec3,\n} from \"gl-matrix\";\nimport type { Service } from \"./worker\";\nimport { MeasureError } from \"./measureError\";\nimport type { ParametricProduct } from \"./worker/parametric_product\";\nimport type {\n  BrepStatus,\n  CameraValues,\n  CollisionValues,\n  CrossSlope,\n  DrawObject,\n  DuoMeasurementValues,\n  FollowParametricObject,\n  LineStripMeasureValues,\n  ManholeMeasureValues,\n  MeasureEntity,\n  MeasurementValues,\n  MeasureSettings,\n  ObjectId,\n  ParameterBounds,\n  Profile,\n  RoadCrossSection,\n  RoadProfiles,\n  SelectedEntity,\n  SnapTolerance,\n} from \"@novorender/measure-api\";\nglMatrix.setMatrixArrayType(Array);\n\ntype MeasureService = Comlink.Remote<Service>;\n\n\n/** Scene with objects being measured. Brep files are required*/\nexport class MeasureScene {\n  readonly workerScene;\n  constructor(readonly assetUrl: URL, readonly measureService: MeasureService) {\n    this.workerScene = this.measureService.createMeasureTool(\n      assetUrl.toString()\n    );\n  }\n\n  private async measurePair(\n    a: MeasureEntity,\n    b: MeasureEntity,\n    settingA?: MeasureSettings,\n    settingB?: MeasureSettings\n  ) {\n    if (a.drawKind == \"vertex\") {\n      if (b.drawKind == \"vertex\") {\n        return this.pointToPoint(a.parameter as vec3, b.parameter as vec3);\n      }\n      return this.measureToPoint(b, a.parameter as vec3, settingB);\n    }\n    if (b.drawKind == \"vertex\") {\n      return this.measureToPoint(a, b.parameter as vec3, settingA);\n    }\n\n    const workerScene = await this.workerScene;\n    const entities = [\n      { object: a, settings: settingA },\n      { object: b, settings: settingB },\n    ];\n    entities.sort((a, b) => a.object.drawKind.localeCompare(b.object.drawKind));\n    const [A, B] = entities;\n    const kindCombo = `${A.object.drawKind}_${B.object.drawKind}`;\n    switch (kindCombo) {\n      case \"curveSegment_curveSegment\":\n        return await workerScene.segmentToSegmentMeasure(\n          A.object.ObjectId,\n          A.object.pathIndex,\n          A.object.instanceIndex,\n          B.object.ObjectId,\n          B.object.pathIndex,\n          B.object.instanceIndex\n        );\n      case \"curveSegment_edge\":\n        return await workerScene.segmentToEdgeMeasure(\n          A.object.ObjectId,\n          A.object.pathIndex,\n          A.object.instanceIndex,\n          B.object.ObjectId,\n          B.object.pathIndex,\n          B.object.instanceIndex\n        );\n      case \"curveSegment_face\":\n        return await workerScene.segmentToFaceMeasure(\n          A.object.ObjectId,\n          A.object.pathIndex,\n          A.object.instanceIndex,\n          B.object.ObjectId,\n          B.object.pathIndex,\n          B.object.instanceIndex,\n          B.settings\n        );\n      case \"edge_edge\":\n        return await workerScene.edgeToEdgeMeasure(\n          a.ObjectId,\n          a.pathIndex,\n          a.instanceIndex,\n          b.ObjectId,\n          b.pathIndex,\n          b.instanceIndex\n        );\n      case \"edge_face\":\n        return await workerScene.edgeToFaceMeasure(\n          A.object.ObjectId,\n          A.object.pathIndex,\n          A.object.instanceIndex,\n          B.object.ObjectId,\n          B.object.pathIndex,\n          B.object.instanceIndex,\n          B.settings\n        );\n      case \"face_face\":\n        return await workerScene.faceToFaceMeasure(\n          a.ObjectId,\n          a.pathIndex,\n          a.instanceIndex,\n          b.ObjectId,\n          b.pathIndex,\n          b.instanceIndex,\n          A.settings,\n          B.settings\n        );\n    }\n  }\n\n  private async measureSingle(a: MeasureEntity, setting?: MeasureSettings) {\n    const workerScene = await this.workerScene;\n    switch (a.drawKind) {\n      case \"curveSegment\":\n        return await workerScene.getCurveValues(\n          a.ObjectId,\n          a.pathIndex,\n          a.instanceIndex,\n          \"curveSegment\"\n        );\n      case \"edge\":\n        return await workerScene.getCurveValues(\n          a.ObjectId,\n          a.pathIndex,\n          a.instanceIndex,\n          \"edge\"\n        );\n      case \"face\":\n        return await workerScene.getFaceValues(\n          a.ObjectId,\n          a.pathIndex,\n          a.instanceIndex,\n          setting\n        );\n    }\n  }\n\n  /** Measure objet, if b is undefined then single measure values are returned else the measurement between 2 objects*/\n  async measure(\n    a: MeasureEntity,\n    b?: MeasureEntity,\n    settingA?: MeasureSettings,\n    settingB?: MeasureSettings\n  ): Promise<MeasurementValues | undefined> {\n    return b\n      ? await this.measurePair(a, b, settingA, settingB)\n      : await this.measureSingle(a, settingA);\n  }\n\n  /** Measure distance between a measurement object an a 3d point*/\n  async measureToPoint(\n    a: MeasureEntity,\n    b: ReadonlyVec3,\n    setting?: MeasureSettings\n  ): Promise<DuoMeasurementValues | undefined> {\n    const point = vec3.copy(vec3.create(), b);\n    if (a.drawKind == \"vertex\") {\n      return this.pointToPoint(a.parameter as vec3, point);\n    }\n    const workerScene = await this.workerScene;\n    switch (a.drawKind) {\n      case \"curveSegment\":\n        return await workerScene.segmentToPointMeasure(\n          a.ObjectId,\n          a.pathIndex,\n          a.instanceIndex,\n          point\n        );\n      case \"edge\":\n        return await workerScene.edgeToPointMeasure(\n          a.ObjectId,\n          a.pathIndex,\n          a.instanceIndex,\n          point\n        );\n      case \"face\":\n        return await workerScene.faceToPointMeasure(\n          a.ObjectId,\n          a.pathIndex,\n          a.instanceIndex,\n          point,\n          setting\n        );\n    }\n  }\n\n  /** Measure distance between 2 points*/\n  pointToPoint(a: ReadonlyVec3, b: ReadonlyVec3): DuoMeasurementValues {\n    const diff = vec3.sub(vec3.create(), a, b);\n    return {\n      drawKind: \"measureResult\",\n      distance: vec3.len(diff),\n      distanceX: Math.abs(diff[0]),\n      distanceY: Math.abs(diff[1]),\n      distanceZ: Math.abs(diff[2]),\n      measureInfoA: { point: vec3.copy(vec3.create(), a) },\n      measureInfoB: { point: vec3.copy(vec3.create(), b) }\n    };\n  }\n\n  async collision(\n    a: SelectedEntity,\n    b: SelectedEntity,\n    setting?: MeasureSettings\n  ): Promise<CollisionValues | undefined> {\n    if (a.drawKind == \"face\" && b.drawKind == \"face\") {\n      const workerScene = await this.workerScene;\n      return await workerScene.faceToFaceCollision(a.ObjectId,\n        a.pathIndex,\n        a.instanceIndex,\n        b.ObjectId,\n        b.pathIndex,\n        b.instanceIndex,\n        setting)\n    }\n    return undefined;\n  }\n\n\n  /** Get suggested camea values for selected object\n   * For cylinder values snap to the closest axis on the cylinder*/\n  async getCameraValues(\n    a: SelectedEntity,\n    cameraDir: vec3\n  ): Promise<CameraValues | undefined> {\n    const workerScene = await this.workerScene;\n    return workerScene.getCameraValuesFromFace(\n      a.ObjectId,\n      a.pathIndex,\n      a.instanceIndex,\n      cameraDir\n    );\n  }\n\n  /** Returns the measure entity for given object and location*/\n  async pickMeasureEntity(\n    id: ObjectId,\n    selectionPosition: ReadonlyVec3,\n    tolerance?: SnapTolerance\n  ): Promise<{ entity: MeasureEntity, status: BrepStatus, connectionPoint?: vec3 }> {\n    const workerScene = await this.workerScene;\n    const pos = vec3.copy(vec3.create(), selectionPosition);\n    return await workerScene.pickEntity(id, pos, tolerance);\n  }\n\n  /** Returns the measure entity for given object and location if the object is current selected object*/\n  async pickMeasureEntityOnCurrentObject(\n    id: ObjectId,\n    selectionPosition: ReadonlyVec3,\n    tolerance: SnapTolerance\n  ): Promise<{ entity: MeasureEntity | undefined, status: BrepStatus, connectionPoint?: vec3 }> {\n    const workerScene = await this.workerScene;\n    const pos = vec3.copy(vec3.create(), selectionPosition);\n    return await workerScene.pickEntityOnCurrentObject(id, pos, tolerance);\n  }\n\n  async swapCylinder(\n    entity: MeasureEntity,\n    to: \"inner\" | \"outer\"\n  ): Promise<MeasureEntity | undefined> {\n    if (entity.drawKind == \"face\") {\n      const workerScene = await this.workerScene;\n      const pathIdx = await workerScene.swapCylinder(\n        entity.ObjectId,\n        entity.pathIndex,\n        entity.instanceIndex,\n        to\n      );\n      if (pathIdx != undefined) {\n        return {\n          ...entity,\n          pathIndex: pathIdx\n        }\n      }\n    }\n  }\n\n  private async followParametricEntity(\n    id: ObjectId,\n    entity: SelectedEntity,\n    setting?: MeasureSettings\n  ) {\n    const workerScene = await this.workerScene;\n    let parameterBounds: ParameterBounds | undefined = undefined;\n    let emulatedCurve: { start: ReadonlyVec3; dir: ReadonlyVec3 } | undefined =\n      undefined;\n    let type: \"edge\" | \"cylinder\" | \"curve\" | undefined = undefined;\n    switch (entity.drawKind) {\n      case \"edge\": {\n        type = \"edge\";\n        parameterBounds = await workerScene.getParameterBoundsForCurve(\n          id,\n          entity.pathIndex,\n          \"edge\"\n        );\n        break;\n      }\n      case \"face\": {\n        const cylinderData = await workerScene.getCylinderCurve(\n          id,\n          entity.pathIndex,\n          entity.instanceIndex,\n          setting\n        );\n        if (cylinderData) {\n          type = \"cylinder\";\n          parameterBounds = cylinderData[0];\n          emulatedCurve = {\n            start: cylinderData[1][0],\n            dir: vec3.normalize(\n              vec3.create(),\n              vec3.subtract(\n                vec3.create(),\n                cylinderData[1][1],\n                cylinderData[1][0]\n              )\n            ),\n          };\n        }\n        break;\n      }\n      case \"curveSegment\": {\n        type = \"curve\";\n        parameterBounds = await workerScene.getParameterBoundsForCurve(\n          id,\n          entity.pathIndex,\n          \"curveSegment\"\n        );\n        break;\n      }\n    }\n\n    if (parameterBounds && type) {\n      async function getCameraValues(\n        t: number\n      ): Promise<CameraValues | undefined> {\n        if (emulatedCurve) {\n          const param =\n            t < 0 ? 0 : t > parameterBounds!.end ? parameterBounds!.end : t;\n          return {\n            position: vec3.scaleAndAdd(\n              vec3.create(),\n              emulatedCurve.start,\n              emulatedCurve.dir,\n              param\n            ),\n            normal: vec3.negate(vec3.create(), emulatedCurve.dir),\n          };\n        }\n        const curveVaues = await workerScene.evalCurve(\n          id,\n          entity!.pathIndex,\n          entity!.instanceIndex,\n          t,\n          entity!.drawKind == \"edge\" ? \"edge\" : \"curveSegment\"\n        );\n        if (curveVaues) {\n          return { position: curveVaues[0], normal: curveVaues[1] };\n        }\n      }\n      const selectedEntity: MeasureEntity = {\n        ...entity,\n        ObjectId: id,\n        drawKind: entity.drawKind,\n      };\n      return {\n        type,\n        ids: [id],\n        selectedEntity,\n        parameterBounds,\n        getCameraValues,\n      };\n    }\n  }\n\n  async followParametricObjectFromPosition(\n    id: ObjectId,\n    selectionPosition: ReadonlyVec3,\n    setting?: MeasureSettings\n  ): Promise<FollowParametricObject | undefined> {\n    const workerScene = await this.workerScene;\n    const pos = vec3.copy(vec3.create(), selectionPosition);\n    const pickedEntity = await workerScene.pickEntity(id, pos);\n    if (pickedEntity.entity && pickedEntity.entity.drawKind != \"vertex\") {\n      return this.followParametricEntity(id, pickedEntity.entity, setting);\n    }\n    return undefined;\n  }\n\n  async followParametricObjects(\n    ids: ObjectId[],\n    setting?: MeasureSettings\n  ): Promise<FollowParametricObject | undefined> {\n    const workerScene = await this.workerScene;\n    if (ids.length == 1) {\n      const entity = await workerScene.viableFollowPathEntity(ids[0]);\n      if (entity != undefined && entity.drawKind != \"vertex\") {\n        return this.followParametricEntity(ids[0], entity);\n      }\n    }\n\n    const lineStrip = await workerScene.getLineStripFromCylinders(ids, setting);\n    if (lineStrip.length > 1) {\n      let len = 0;\n      for (let i = 1; i < lineStrip.length; ++i) {\n        len += vec3.dist(lineStrip[i - 1], lineStrip[i]);\n      }\n\n      const parameterBounds = { start: 0, end: len };\n      async function getCameraValues(\n        t: number\n      ): Promise<CameraValues | undefined> {\n        const param =\n          t < 0 ? 0 : t > parameterBounds!.end ? parameterBounds!.end : t;\n        let i = 1;\n        let length = 0;\n        let prevLength = 0;\n        let currLength = 0;\n        for (; i < lineStrip.length; ++i) {\n          currLength = vec3.dist(lineStrip[i - 1], lineStrip[i]);\n          length += currLength;\n          if (length > param) {\n            break;\n          }\n          prevLength = length;\n        }\n        if (i == lineStrip.length) {\n          const dir = vec3.subtract(\n            vec3.create(),\n            lineStrip[i - 2],\n            lineStrip[i - 1]\n          );\n          return {\n            position: lineStrip[i - 1],\n            normal: vec3.normalize(dir, dir),\n          };\n        }\n\n        const dir = vec3.subtract(\n          vec3.create(),\n          lineStrip[i - 1],\n          lineStrip[i]\n        );\n\n        return {\n          position: vec3.lerp(\n            vec3.create(),\n            lineStrip[i - 1],\n            lineStrip[i],\n            (param - prevLength) / currLength\n          ),\n          normal: vec3.normalize(dir, dir),\n        };\n      }\n\n      return {\n        type: lineStrip.length == 2 ? \"cylinder\" : \"cylinders\",\n        ids,\n        selectedEntity: undefined,\n        parameterBounds,\n        getCameraValues,\n      };\n    }\n\n    return undefined;\n  }\n\n  async getParametricProduct(\n    productId: number\n  ): Promise<ParametricProduct | undefined> {\n    const workerScene = await this.workerScene;\n    return await workerScene.getProductObject(productId);\n  }\n\n  async getProfileViewFromEntity(\n    entity: MeasureEntity,\n    setting?: MeasureSettings\n  ): Promise<Profile | undefined> {\n    const workerScene = await this.workerScene;\n    switch (entity.drawKind) {\n      case \"curveSegment\": {\n        return await workerScene.curveSegmentProfile(\n          entity.ObjectId,\n          entity.pathIndex,\n          entity.instanceIndex\n        );\n      }\n      case \"face\": {\n        return await workerScene.cylinderProfile(\n          entity.ObjectId,\n          entity.pathIndex,\n          entity.instanceIndex,\n          setting\n        );\n      }\n    }\n    return undefined;\n  }\n\n  async getProfileViewFromMultiSelect(\n    products: ObjectId[],\n    setting?: MeasureSettings\n  ): Promise<Profile | undefined> {\n    const workerScene = await this.workerScene;\n    const profile = await workerScene.multiSelectProfile(products, setting);\n    if (typeof profile === \"string\") {\n      throw new MeasureError(\"Profile error\", profile);\n    }\n    return profile;\n  }\n\n  reverseProfile(inProfile: Profile): Profile {\n    const endParam =\n      inProfile.profilePoints[inProfile.profilePoints.length - 1][0];\n    const rProfile: ReadonlyVec2[] = [];\n    for (let i = inProfile.profilePoints.length - 1; i >= 0; --i) {\n      const p = inProfile.profilePoints[i];\n      rProfile.push(vec2.fromValues((p[0] - endParam) * -1, p[1]));\n    }\n    return {\n      profilePoints: rProfile,\n      slopes: inProfile.slopes.reverse(),\n      startElevation: inProfile.endElevation,\n      endElevation: inProfile.startElevation,\n      top: inProfile.top,\n      bottom: inProfile.bottom,\n    };\n  }\n\n  areaFromPolygon(\n    vertices: ReadonlyVec3[],\n    normals: ReadonlyVec3[]\n  ): { area: number | undefined; polygon: ReadonlyVec3[] } {\n    if (vertices.length == 0) {\n      return { area: undefined, polygon: [] };\n    }\n    if (vertices.length != normals.length) {\n      throw new MeasureError(\n        \"Area measurement\",\n        \"Number of normals and vertices needs to be equal\"\n      );\n    }\n    let useXYPlane = false;\n    const epsilon = 0.001;\n    const normal = normals[0];\n    for (let i = 1; i < normals.length; ++i) {\n      if (1 - Math.abs(vec3.dot(normal, normals[i])) > epsilon) {\n        useXYPlane = true;\n        break;\n      }\n    }\n\n    if (useXYPlane) {\n      let total = 0;\n      const polygon: ReadonlyVec3[] = [];\n      for (let i = 0; i < vertices.length; i++) {\n        let addX = vertices[i][0];\n        let addY = vertices[i == vertices.length - 1 ? 0 : i + 1][1];\n        let subX = vertices[i == vertices.length - 1 ? 0 : i + 1][0];\n        let subY = vertices[i][1];\n\n        total += addX * addY * 0.5;\n        total -= subX * subY * 0.5;\n        polygon.push(\n          vec3.fromValues(vertices[i][0], vertices[i][1], vertices[0][2])\n        );\n      }\n      return { area: Math.abs(total), polygon };\n    }\n\n    const polygon: ReadonlyVec3[] = [];\n    polygon.push(vertices[0]);\n    const vertex = vertices[0];\n    for (let i = 1; i < vertices.length; ++i) {\n      const v = vertices[i];\n      const vo = vec3.subtract(vec3.create(), v, vertex);\n      const dist = vec3.dot(vo, normal) * -1;\n      polygon.push(vec3.scaleAndAdd(vec3.create(), v, normal, dist));\n    }\n\n    if (polygon.length == 1) {\n      return { area: 0, polygon };\n    }\n    const xDir = vec3.subtract(vec3.create(), polygon[1], polygon[0]);\n    vec3.normalize(xDir, xDir);\n    const yDir = vec3.cross(vec3.create(), normal, xDir);\n    vec3.normalize(yDir, yDir);\n\n    const polygon2d: ReadonlyVec2[] = [];\n    polygon2d.push(vec2.fromValues(0, 0));\n    for (let i = 1; i < vertices.length; ++i) {\n      const p = polygon[i];\n      const po = vec3.subtract(vec3.create(), p, vertex);\n      polygon2d.push(vec2.fromValues(vec3.dot(po, xDir), vec3.dot(po, yDir)));\n    }\n\n    let total = 0;\n    for (let i = 0; i < polygon2d.length; i++) {\n      let addX = polygon2d[i][0];\n      let addY = polygon2d[i == vertices.length - 1 ? 0 : i + 1][1];\n      let subX = polygon2d[i == vertices.length - 1 ? 0 : i + 1][0];\n      let subY = polygon2d[i][1];\n\n      total += addX * addY * 0.5;\n      total -= subX * subY * 0.5;\n    }\n    return { area: Math.abs(total), polygon };\n  }\n\n  measureLineStrip(vertices: ReadonlyVec3[]): LineStripMeasureValues {\n    let totalLength = 0;\n    let segmentLengts: number[] = [];\n    let angles: number[] = [];\n    let prevSeg: ReadonlyVec3 | undefined = undefined;\n    for (let i = 1; i < vertices.length; ++i) {\n      const l = vec3.dist(vertices[i - 1], vertices[i]);\n      totalLength += l;\n      segmentLengts.push(l);\n      const dir = vec3.sub(vec3.create(), vertices[i], vertices[i - 1]);\n      vec3.normalize(dir, dir);\n      if (prevSeg != undefined) {\n        let angle = vec3.angle(prevSeg, dir);\n        if (angle > Math.PI) {\n          angle = Math.PI * 2 - angle;\n        }\n        angles.push(angle);\n      }\n      vec3.negate(dir, dir);\n      prevSeg = dir;\n    }\n\n    return { totalLength, linestrip: vertices, segmentLengts, angles };\n  }\n\n  async inspectObject(productId: number, objectType: \"manhole\"): Promise<ManholeMeasureValues | undefined> {\n    const workerScene = await this.workerScene;\n    return workerScene.getManholeValues(productId);\n  }\n\n  async getManholeDrawObject(entity: ManholeMeasureValues): Promise<DrawObject[]> {\n    const workerScene = await this.workerScene;\n    return workerScene.getManholeDrawObject(entity);\n  }\n\n  async getEntitiyDrawObjects(\n    entity: MeasureEntity,\n    setting?: MeasureSettings\n  ): Promise<DrawObject | undefined> {\n    const workerScene = await this.workerScene;\n\n    switch (entity.drawKind) {\n      case \"edge\": {\n        const wsVertices = await workerScene.getTesselatedEdge(\n          entity.ObjectId,\n          entity.pathIndex,\n          entity.instanceIndex\n        );\n        return {\n          kind: \"edge\", parts: [{ vertices3D: wsVertices, drawType: \"lines\" }]\n        };\n      }\n      case \"face\": {\n        const drawObjects = await workerScene.getFaceDrawObject(\n          entity.ObjectId,\n          entity.pathIndex,\n          entity.instanceIndex,\n          setting\n        );\n        return drawObjects;\n      }\n      case \"vertex\": {\n        return {\n          kind: \"vertex\",\n          parts: [{ vertices3D: [entity.parameter as vec3], drawType: \"vertex\" }]\n        };\n      }\n      case \"curveSegment\": {\n        const wsVertices = await workerScene.tesselateCurveSegment(\n          entity.ObjectId,\n          entity.pathIndex,\n          entity.instanceIndex\n        );\n        return {\n          kind: \"curveSegment\",\n          parts: [{ vertices3D: wsVertices, drawType: \"lines\" }]\n        };\n      }\n    }\n  }\n\n  async getRoadProfile(roadId: string): Promise<RoadProfiles | undefined> {\n    const workerScene = await this.workerScene;\n    return workerScene.getRoadProfile(roadId);\n  }\n\n  async getCrossSlope(roadId: string): Promise<CrossSlope | undefined> {\n    const workerScene = await this.workerScene;\n    return workerScene.getRoadCrossSlope(roadId);\n  }\n\n  async getCrossSections(roadIds: string[], profileNumber: number): Promise<RoadCrossSection[]> {\n    const workerScene = await this.workerScene;\n    const sections = await Promise.all(roadIds.map((rId) => workerScene.getCrossSection(rId, profileNumber)));\n    const s = sections.filter(s => s != undefined);\n    return s as RoadCrossSection[];\n  }\n\n  // async prepareForLengthProfile(segments: {\n  //   id: ObjectId,\n  //   curveSegmentIdx: number,\n  //   instanceIdx: number,\n  //   name: string\n  // }[]) {\n  //   const workerScene = await this.workerScene;\n  //   return workerScene.prepareForLengthProfile(segments);\n  // }\n\n}\n\nexport async function loadScene(\n  measureService: MeasureService,\n  assetsUrl: URL\n) {\n  return new MeasureScene(assetsUrl, measureService);\n}", "import { ReadonlyVec2, vec2, vec3 } from \"gl-matrix\";\n\n\nexport interface Intersection2d {\n    t: number,\n    u: number,\n    p: ReadonlyVec2\n}\n\nexport function lineSeg2dIntersection(lineA: { start: ReadonlyVec2, end: ReadonlyVec2 }, lineB: { start: ReadonlyVec2, end: ReadonlyVec2 }): Intersection2d | undefined {\n\n    const dirA = vec2.sub(vec2.create(), lineA.end, lineA.start);\n    const dirB = vec2.sub(vec2.create(), lineB.end, lineB.start);\n\n    const axb = dirA[0] * dirB[1] - dirA[1] * dirB[0];\n    const startDir = vec2.sub(vec2.create(), lineB.start, lineA.start);\n    //const sxa = startDir[0] * dirA[1] - startDir[1] * dirA[0];\n\n    if (axb == 0) {\n        return undefined;\n    }\n\n    const t = (startDir[0] * dirB[1] - startDir[1] * dirB[0]) / axb;\n    const u = (startDir[0] * dirA[1] - startDir[1] * dirA[0]) / axb;\n\n    if ((0 <= t && t <= 1) && (0 <= u && u <= 1)) {\n        return {\n            p: vec2.scaleAndAdd(vec2.create(), lineA.start, dirA, t), t, u\n        }\n    }\n\n    return undefined;\n}", "import type { Camera, DrawObject, DrawPart, DrawProduct, DuoMeasurementValues } from \"@novorender/measure-api\";\nimport { ReadonlyVec2, ReadonlyVec3, vec2, vec3 } from \"gl-matrix\";\nimport { FillDrawInfo2D } from \"./pathRender\";\nimport { Intersection2d, lineSeg2dIntersection } from \"./calculations2d\";\n\nexport const SCREEN_SPACE_EPSILON = 0.000001;\n\nexport function getResultDrawObject(result: DuoMeasurementValues): DrawObject {\n    const parts: DrawPart[] = [];\n    if (result.measureInfoA?.point && result.measureInfoB?.point) {\n        const measurePoints = [result.measureInfoA?.point, result.measureInfoB?.point];\n        const flip = measurePoints[0][2] > measurePoints[1][2];\n        let pts = flip ? [measurePoints[1], measurePoints[0]] : [measurePoints[0], measurePoints[1]];\n        const diff = vec3.sub(vec3.create(), pts[0], pts[1]);\n        const measureLen = vec3.len(diff);\n        parts.push({ name: \"result\", text: measureLen.toFixed(3), drawType: \"lines\", vertices3D: [vec3.clone(measurePoints[0]), vec3.clone(measurePoints[1])] });\n\n        pts = [\n            pts[0],\n            vec3.fromValues(pts[1][0], pts[0][1], pts[0][2]),\n            vec3.fromValues(pts[1][0], pts[1][1], pts[0][2]),\n            pts[1],\n        ];\n\n        parts.push({ name: \"x-axis\", text: Math.abs(diff[0]).toFixed(3), drawType: \"lines\", vertices3D: [vec3.clone(pts[0]), vec3.clone(pts[1])] });\n        parts.push({ name: \"y-axis\", text: Math.abs(diff[1]).toFixed(3), drawType: \"lines\", vertices3D: [vec3.clone(pts[1]), vec3.clone(pts[2])] });\n        parts.push({ name: \"z-axis\", text: Math.abs(diff[2]).toFixed(3), drawType: \"lines\", vertices3D: [vec3.clone(pts[2]), vec3.clone(pts[3])] });\n\n\n        const planarDiff = vec2.len(vec2.fromValues(diff[0], diff[2]));\n        const xyPt1 = vec3.fromValues(pts[0][0], pts[0][1], Math.min(pts[0][2], pts[3][2]));\n        const xyPt2 = vec3.fromValues(pts[3][0], pts[3][1], Math.min(pts[0][2], pts[3][2]));\n        parts.push({ name: \"xy-plane\", text: planarDiff.toFixed(3), drawType: \"lines\", vertices3D: [xyPt1, xyPt2] });\n\n        //Angles:\n        const zDiff = vec3.sub(vec3.create(), pts[2], pts[3]);\n        const angle = vec3.angle(diff, zDiff) * (180 / Math.PI);\n        if (angle > 0.1) {\n            const fromP = flip ? vec3.clone(measurePoints[1]) : vec3.clone(measurePoints[0]);\n            const toP = vec3.clone(pts[2]);\n            parts.push({ name: \"z-angle\", text: angle.toFixed(1) + \"\u00B0\", drawType: \"angle\", vertices3D: [vec3.clone(pts[3]), fromP, toP] });\n        }\n\n        const xzDiff = vec3.sub(vec3.create(), xyPt1, xyPt2);\n        const xzAngle = vec3.angle(diff, xzDiff) * (180 / Math.PI);\n        if (xzAngle > 0.1) {\n            const fromP = flip ? vec3.clone(measurePoints[0]) : vec3.clone(measurePoints[1]);\n            parts.push({ name: \"xz-angle\", text: xzAngle.toFixed(1) + \"\u00B0\", drawType: \"angle\", vertices3D: [vec3.clone(xyPt1), fromP, vec3.clone(xyPt2)] });\n        }\n    }\n\n    if (result.angle) {\n        parts.push({\n            name: \"cylinder-angle\", text: (result.angle.radians * (180 / Math.PI)).toFixed(1) + \"\u00B0\", drawType: \"angle\",\n            vertices3D: [vec3.clone(result.angle.angleDrawInfo[0]), vec3.clone(result.angle.angleDrawInfo[1]), vec3.clone(result.angle.angleDrawInfo[2])]\n        });\n        if (result.angle.additionalLine) {\n            parts.push({ name: \"cylinder-angle-line\", drawType: \"lines\", vertices3D: [vec3.clone(result.angle.additionalLine[0]), vec3.clone(result.angle.additionalLine[1])] });\n        }\n    }\n\n    if (result.normalPoints) {\n        const dist = vec3.len(vec3.sub(vec3.create(), result.normalPoints[0], result.normalPoints[1]));\n        parts.push({ name: \"normal\", text: dist.toFixed(3), drawType: \"lines\", vertices3D: [vec3.clone(result.normalPoints[0]), vec3.clone(result.normalPoints[1])] });\n    }\n    return { parts, kind: \"complex\" }\n}\n\nexport function getDrawObjectFromPointArray(\n    width: number, height: number, camera: Camera,\n    points: ReadonlyVec3[], closed: boolean, angles: boolean, generateLineLabels: boolean): DrawProduct | undefined {\n    if (points.length === 0) {\n        return undefined;\n    }\n    const parts: DrawPart[] = [];\n    if (points.length === 1) {\n        parts.push({ drawType: \"vertex\", vertices3D: points });\n    } else {\n        let text: string[][] | undefined = undefined;\n        if (generateLineLabels) {\n            const labels: string[] = [];\n            for (let i = 1; i < points.length; ++i) {\n                labels.push(vec3.dist(points[i - 1], points[i]).toFixed(3));\n            }\n            text = [labels];\n        }\n        parts.push({ drawType: closed ? \"filled\" : \"lines\", vertices3D: points, text });\n    }\n\n    const drawObjects: DrawObject[] = [];\n    drawObjects.push({ kind: \"complex\", parts });\n    if (angles) {\n        const endIdx = closed ? points.length : points.length - 1;\n        for (let i = closed ? 0 : 1; i < endIdx; ++i) {\n            const anglePt = points[i];\n            const fromPIdx = i === 0 ? points.length - 1 : i - 1;\n            const toPIdx = i === points.length - 1 ? 0 : i + 1;\n            const fromP = points[fromPIdx];\n            const toP = points[toPIdx];\n            const diffA = vec3.sub(vec3.create(), points[fromPIdx], anglePt);\n            const diffB = vec3.sub(vec3.create(), points[toPIdx], anglePt);\n            const angle = vec3.angle(diffA, diffB) * (180 / Math.PI);\n            if (angle > 0.1) {\n                parts.push({ text: angle.toFixed(1) + \"\u00B0\", drawType: \"angle\", vertices3D: [vec3.clone(anglePt), vec3.clone(fromP), vec3.clone(toP)] });\n            }\n        }\n    }\n\n    FillDrawInfo2D(width, height, camera, drawObjects);\n    return { kind: \"basic\", objects: drawObjects };\n}\n\nexport function getDrawTextObject(\n    width: number, height: number, camera: Camera,\n    points: ReadonlyVec3[], text: string): DrawProduct | undefined {\n    if (points.length === 0) {\n        return undefined;\n    }\n    const parts: DrawPart[] = [];\n    parts.push({ drawType: \"text\", vertices3D: points, text });\n\n    const drawObjects: DrawObject[] = [];\n    drawObjects.push({ kind: \"complex\", parts });\n\n    FillDrawInfo2D(width, height, camera, drawObjects);\n    return { kind: \"basic\", objects: drawObjects };\n}\n\nexport function get2dNormal(object: DrawProduct, line: { start: ReadonlyVec2, end: ReadonlyVec2 }): { normal: ReadonlyVec2, position: ReadonlyVec2 } | undefined {\n    if (object.kind != \"basic\") {\n        return undefined;\n    }\n    const intersections: {\n        intersection: Intersection2d, line: { start: ReadonlyVec2, end: ReadonlyVec2 }\n    }[] = [];\n    const emptyVertex = vec3.create();\n    object.objects.forEach(drawobj => {\n        if (drawobj.kind == \"complex\" || drawobj.kind == \"curveSegment\" || drawobj.kind == \"edge\") {\n            drawobj.parts.forEach(part => {\n                if (part.vertices2D && (part.drawType == \"lines\" || part.drawType == \"curveSegment\" || part.drawType == \"filled\")) {\n                    for (let i = 1; i < part.vertices2D.length; ++i) {\n                        if (vec3.equals(part.vertices3D[i - 1], emptyVertex) || vec3.equals(part.vertices3D[i], emptyVertex)) {\n                            continue;\n                        }\n                        const lineB = { start: part.vertices2D[i - 1], end: part.vertices2D[i] };\n                        const intersection = lineSeg2dIntersection(line, lineB);\n                        if (intersection) {\n                            intersections.push({ intersection, line: lineB });\n                        }\n                    }\n                }\n            });\n        }\n    });\n    if (intersections.length > 0) {\n        intersections.sort((a, b) => a.intersection.t - b.intersection.t);\n        const line = intersections[0].line;\n        const dx = line.end[0] - line.start[0];\n        const dy = line.end[1] - line.start[1];\n        const normal = vec2.fromValues(-dy, dx);\n        vec2.normalize(normal, normal);\n        return {\n            normal, position: intersections[0].intersection.p\n        };\n    }\n    return undefined;\n}\n\n\nexport function getTraceDrawOject(objects: DrawProduct[], line: { start: ReadonlyVec2, end: ReadonlyVec2 }): DrawProduct {\n    if (objects.length > 1) {\n        const intersections: {\n            intersection: Intersection2d, point3d: ReadonlyVec3\n        }[] = [];\n        const emptyVertex = vec3.create();\n        objects.forEach(obj => {\n            if (obj.kind == \"basic\") {\n                obj.objects.forEach(drawobj => {\n                    if (drawobj.kind == \"complex\" || drawobj.kind == \"curveSegment\" || drawobj.kind == \"edge\") {\n                        drawobj.parts.forEach(part => {\n                            if (part.vertices2D && (part.drawType == \"lines\" || part.drawType == \"curveSegment\" || part.drawType == \"filled\")) {\n                                for (let i = 1; i < part.vertices2D.length; ++i) {\n                                    if (vec3.equals(part.vertices3D[i - 1], emptyVertex) || vec3.equals(part.vertices3D[i], emptyVertex)) {\n                                        continue;\n                                    }\n                                    const lineB = { start: part.vertices2D[i - 1], end: part.vertices2D[i] };\n                                    const intersection = lineSeg2dIntersection(line, lineB);\n                                    if (intersection) {\n                                        const dir = vec3.sub(vec3.create(), part.vertices3D[i], part.vertices3D[i - 1]);\n                                        intersections.push({ intersection, point3d: vec3.scaleAndAdd(vec3.create(), part.vertices3D[i - 1], dir, intersection.u) });\n                                    }\n                                }\n                            }\n                        });\n                    }\n                });\n            }\n        });\n        if (intersections.length > 1) {\n            intersections.sort((a, b) => a.intersection.t - b.intersection.t);\n            const vertices3D: ReadonlyVec3[] = [vec3.create()];\n            const vertices2D: ReadonlyVec2[] = [line.start];\n            const labels: string[] = [\"\"];\n            intersections.forEach(intersection => {\n                vertices2D.push(intersection.intersection.p);\n            });\n            vertices2D.push(line.end);\n            for (let i = 0; i < intersections.length; ++i) {\n                if (i != 0) {\n                    labels.push(vec3.dist(intersections[i].point3d, intersections[i - 1].point3d).toFixed(3) + \"m\");\n                }\n                vertices3D.push(intersections[i].point3d);\n            }\n            vertices3D.push(vec3.create());\n            labels.push(\"\");\n\n            const parts: DrawPart[] = [];\n            parts.push({ drawType: \"lines\", vertices3D, vertices2D, text: [labels] });\n\n            const drawObjects: DrawObject[] = [];\n            drawObjects.push({ kind: \"complex\", parts });\n            return { kind: \"basic\", objects: drawObjects };\n        }\n\n    }\n    const parts: DrawPart[] = [];\n    parts.push({ drawType: \"lines\", vertices3D: [], vertices2D: [line.start, line.end] });\n\n    const drawObjects: DrawObject[] = [];\n    drawObjects.push({ kind: \"complex\", parts });\n    return { kind: \"basic\", objects: drawObjects };\n}\n", "import {\n  glMatrix,\n  mat4,\n  quat,\n  ReadonlyVec2,\n  ReadonlyVec3,\n  vec2,\n  vec3,\n  vec4,\n} from \"gl-matrix\";\nimport type { Camera, DrawableEntity, DrawObject, DrawProduct, DuoMeasurementValues, ManholeMeasureValues, MeasureEntity, MeasureSettings } from \"@novorender/measure-api\";\nimport type { MeasureScene } from \"./measureScene\";\nimport { getResultDrawObject, SCREEN_SPACE_EPSILON } from \"./drawobject_factory\";\n\nexport function getPathMatrices(width: number, height: number, camera: Camera): { camMat: mat4; projMat: mat4 } {\n  const camMat = mat4.fromRotationTranslation(\n    mat4.create(),\n    camera.rotation,\n    camera.position\n  );\n  mat4.invert(camMat, camMat);\n  if (camera.kind == \"pinhole\") {\n    const projMat = mat4.perspective(\n      mat4.create(),\n      glMatrix.toRadian(camera.fov),\n      width / height,\n      camera.near,\n      camera.far\n    );\n    return { camMat, projMat };\n  } else {\n    const aspect = width / height;\n    const halfHeight = camera.fov / 2;\n    const halfWidth = halfHeight * aspect;\n    const projMat = mat4.ortho(\n      mat4.create(),\n      -halfWidth,\n      halfWidth,\n      -halfHeight,\n      halfHeight,\n      camera.near,\n      camera.far\n    );\n    return { camMat, projMat };\n  }\n}\n\nexport function toScreen(projMat: mat4, width: number, height: number, p: ReadonlyVec3): ReadonlyVec2 {\n  const _p = vec4.transformMat4(\n    vec4.create(),\n    vec4.fromValues(p[0], p[1], p[2], 1),\n    projMat\n  );\n\n  const pt = vec2.fromValues(\n    Math.round(((_p[0] * 0.5) / _p[3] + 0.5) * width),\n    Math.round((0.5 - (_p[1] * 0.5) / _p[3]) * height)\n  );\n\n  return pt.every((num) => !Number.isNaN(num) && Number.isFinite(num)) ? pt : vec2.fromValues(-100, -100);\n};\n\nexport function toPathPointsFromMatrices(\n  points: ReadonlyVec3[],\n  camMat: mat4,\n  projMat: mat4,\n  near: number,\n  width: number,\n  height: number,\n  ortho: boolean\n): { screenPoints: ReadonlyVec2[], points2d: ReadonlyVec2[], removedIndices: number[], addedIndices: number[] } | undefined {\n  const clip = (p: vec3, p0: vec3) => {\n    const d = vec3.sub(vec3.create(), p0, p);\n    vec3.scale(d, d, (-near - p[2]) / d[2]);\n    return vec3.add(d, d, p);\n  };\n\n  const points2d: ReadonlyVec2[] = [];\n  const removedIndices: number[] = [];\n  const addedIndices: number[] = [];\n  const sv = points.map((v) => vec3.transformMat4(vec3.create(), v, camMat));\n  if (ortho) {\n    for (const p of sv) {\n      if (p[2] > 0 && p[2] < 0.1) {\n        p[2] = -0.0001;\n      }\n    }\n  }\n  const screenPoints = sv.reduce((tail, head, i) => {\n    if (head[2] > SCREEN_SPACE_EPSILON) {\n      if (i === 0 || sv[i - 1][2] > 0) {\n        removedIndices.push(i);\n        return tail;\n      }\n      const p0 = clip(sv[i - 1], head);\n      const _p = toScreen(projMat, width, height, p0);\n      points2d.push(_p);\n      return tail.concat([_p]);\n    }\n    const _p = toScreen(projMat, width, height, head);\n    points2d.push(_p);\n    if (i !== 0 && sv[i - 1][2] > SCREEN_SPACE_EPSILON) {\n      const p0 = clip(head, sv[i - 1]);\n      const _p0 = toScreen(projMat, width, height, p0);\n      addedIndices.push(i);\n      return tail.concat([_p0], [_p]);\n    }\n    return tail.concat([_p]);\n  }, [] as ReadonlyVec2[]);\n  if (screenPoints.length) {\n    return { screenPoints, points2d, removedIndices, addedIndices };\n  }\n  return undefined;\n}\n\n\nexport function FillDrawInfo2D(width: number, height: number, camera: Camera, drawObjects: DrawObject[]) {\n  const { camMat, projMat } = getPathMatrices(width, height, camera);\n\n  for (const drawObject of drawObjects) {\n    for (const drawPart of drawObject.parts) {\n      const points = toPathPointsFromMatrices(\n        drawPart.vertices3D,\n        camMat,\n        projMat,\n        camera.near,\n        width,\n        height,\n        camera.kind == \"orthographic\"\n      );\n      if (points) {\n        const { screenPoints, removedIndices, addedIndices } = points;\n        drawPart.vertices2D = screenPoints;\n        if ((removedIndices.length > 0 || addedIndices.length > 0)) {\n          if (drawPart.text && Array.isArray(drawPart.text)) {\n            drawPart.text[0] = drawPart.text[0].reduce((tail, head, i) => {\n              if (addedIndices.find((v) => v == i) != undefined && removedIndices.find((v) => v == i - 1) == undefined) {\n                return tail.concat([\"\", head])\n              }\n              if (removedIndices.find((v) => v == i) != undefined && removedIndices.find((v) => v == i + 1) != undefined) {\n                return tail;\n              } else {\n                return tail.concat(head);\n              }\n            }, [] as string[]);\n          }\n          const newVert3d: ReadonlyVec3[] = [];\n          drawPart.vertices3D.forEach((v, i) => {\n            if (addedIndices.find((v) => v == i) != undefined && removedIndices.find((v) => v == i - 1) == undefined) {\n              newVert3d.concat([vec3.create(), v])\n            }\n            else if (removedIndices.find((v) => v == i) == undefined || removedIndices.find((v) => v == i + 1) == undefined) {\n              return newVert3d.push(v);\n            }\n            drawPart.vertices3D = newVert3d;\n          });\n        }\n      }\n      if (drawPart.voids) {\n        drawPart.voids.forEach((drawVoid, j) => {\n          const voidPoints = toPathPointsFromMatrices(\n            drawVoid.vertices3D,\n            camMat,\n            projMat,\n            camera.near,\n            width,\n            height,\n            camera.kind == \"orthographic\"\n          );\n          if (voidPoints) {\n            const { screenPoints, removedIndices, addedIndices } = voidPoints;\n            drawVoid.vertices2D = screenPoints;\n            if ((removedIndices.length > 0 || addedIndices.length > 0) && drawPart.text && Array.isArray(drawPart.text)) {\n              drawPart.text[j + 1] = drawPart.text[j + 1].reduce((tail, head, i) => {\n                if (addedIndices.find((v) => v == i) != undefined && removedIndices.find((v) => v == i - 1) == undefined) {\n                  return tail.concat([\"\", head])\n                }\n                if (removedIndices.find((v) => v == i) != undefined && removedIndices.find((v) => v == i + 1) != undefined) {\n                  return tail;\n                } else {\n                  return tail.concat(head);\n                }\n              }, [] as string[]);\n            }\n\n          }\n        });\n      }\n    }\n  }\n}\n\n\nexport async function renderMeasureEntity(\n  width: number, height: number, camera: Camera,\n  scene: MeasureScene,\n  entity: DrawableEntity,\n  setting?: MeasureSettings\n): Promise<(DrawProduct | undefined) | undefined> {\n  if (entity) {\n    let drawObjects: DrawObject[] = [];\n    let kind: \"manhole\" | \"basic\" | \"measureResult\" | undefined = undefined;\n    if (entity.drawKind == \"manhole\") {\n      drawObjects = await scene.getManholeDrawObject(entity as ManholeMeasureValues);\n      kind = \"manhole\"\n    }\n    else if (entity.drawKind == \"measureResult\") {\n      drawObjects = [getResultDrawObject(entity as DuoMeasurementValues)];\n      kind = \"measureResult\";\n    }\n    else {\n      const drawObject = await scene.getEntitiyDrawObjects(entity as MeasureEntity, setting);\n      if (drawObject) {\n        drawObjects = [drawObject];\n      }\n      kind = \"basic\";\n    }\n\n    if (drawObjects) {\n      FillDrawInfo2D(width, height, camera, drawObjects);\n    }\n    return {\n      kind, objects: drawObjects\n    };\n  }\n  return undefined;\n}", "import * as Comlink from \"comlink\";\nimport { MeasureScene } from \"./measureScene\";\nimport type { Service } from \"./worker\";\nimport { ReadonlyVec2, ReadonlyVec3, vec2, vec3 } from \"gl-matrix\";\nimport { FillDrawInfo2D, getPathMatrices, renderMeasureEntity, toPathPointsFromMatrices, toScreen } from \"./pathRender\";\nimport type * as Public from \"@novorender/webgl-api\";\nimport type { Camera, DrawableEntity, DrawObject, DrawProduct, MeasureSettings } from \"@novorender/measure-api\";\nimport { get2dNormal, getDrawObjectFromPointArray, getDrawTextObject, getTraceDrawOject, SCREEN_SPACE_EPSILON } from \"./drawobject_factory\";\n\ntype MeasureService = Comlink.Remote<Service>;\n\nconst currentScriptUrl =\n  (document.currentScript as HTMLScriptElement | null)?.src ?? import.meta.url;\n\n/** Measure api loads from same scene assets. Brep files are required*/\nexport class MeasureAPI {\n  private readonly scriptUrl: string;\n\n  private workers:\n    | {\n      readonly measure: {\n        worker: Comlink.Endpoint;\n        service: MeasureService;\n      };\n    }\n    | undefined;\n\n  constructor(scriptBaseUrl?: string) {\n    const url = new URL(scriptBaseUrl ?? currentScriptUrl);\n    this.scriptUrl = new URL(\"./\", url).href.slice(0, -1);\n  }\n\n  private createWorkers() {\n    const createWorker = (url: string, name: string): Comlink.Endpoint => {\n      if (this.scriptUrl.startsWith(self.location.origin)) {\n        return new Worker(url, { type: \"classic\", name });\n      } else {\n        const scriptBlob = new Blob(\n          [`importScripts(${JSON.stringify(url)});`],\n          { type: \"text/javascript\" }\n        );\n        const blobUrl = URL.createObjectURL(scriptBlob);\n        const worker = new Worker(blobUrl, { type: \"classic\", name });\n        URL.revokeObjectURL(blobUrl);\n        return worker;\n      }\n    };\n    const measureWorker = createWorker(\n      `${this.scriptUrl}/worker.js`,\n      \"Measure\"\n    );\n    const measureService = Comlink.wrap<Service>(measureWorker);\n    this.workers = {\n      measure: {\n        worker: measureWorker,\n        service: measureService,\n      },\n    };\n    measureService.initialize(this.scriptUrl);\n  }\n\n  loadScene(url: URL | string) {\n    if (!this.workers) {\n      this.createWorkers();\n    }\n    if (typeof url === \"string\") {\n      url = new URL(url.toString());\n    }\n    return new MeasureScene(url, this.workers!.measure.service);\n  }\n\n  async dispose(): Promise<void> {\n    const { workers } = this;\n    if (workers) {\n      const { measure } = workers;\n      await measure.service.terminate();\n      measure.service[Comlink.releaseProxy]();\n      this.workers = undefined;\n    }\n  }\n\n  /** Converts world space points to on screen pixel path and points*/\n  toPathPoints(\n    points: ReadonlyVec3[],\n    width: number, height: number, camera: Camera,\n  ): { screenPoints: ReadonlyVec2[], points2d: ReadonlyVec2[], removedIndices: number[] } | undefined {\n    const { camMat, projMat } = getPathMatrices(width, height, camera);\n\n    return toPathPointsFromMatrices(\n      points,\n      camMat,\n      projMat,\n      camera.near,\n      width, height,\n      camera.kind == \"orthographic\"\n    );\n  }\n\n  /** Converts world space points to on screen pixel points. Input and output are of equal length. */\n  toMarkerPoints(width: number, height: number, camera: Camera, points: ReadonlyVec3[]): (ReadonlyVec2 | undefined)[] {\n    const { camMat, projMat } = getPathMatrices(width, height, camera);\n\n    return points\n      .map((p) => vec3.transformMat4(vec3.create(), p, camMat))\n      .map((p, i, arr) => {\n        if (camera.kind === \"orthographic\") {\n          if (p[2] > 0 && p[2] < 0.1) {\n            p[2] = -0.0001;\n          }\n        }\n\n        if (p[2] > SCREEN_SPACE_EPSILON) {\n          return undefined;\n        }\n\n        return toScreen(projMat, width, height, p)\n      })\n  }\n\n  async getDrawMeasureEntity(\n    width: number, height: number, camera: Camera,\n    scene: MeasureScene,\n    entity: DrawableEntity,\n    setting?: MeasureSettings\n  ): Promise<(DrawProduct | undefined) | undefined> {\n    return renderMeasureEntity(width, height, camera, scene, entity, setting);\n  }\n\n  updateDrawProuct(width: number, height: number, camera: Camera, drawProduct: DrawProduct) {\n    FillDrawInfo2D(width, height, camera, drawProduct.objects);\n  }\n\n  getDrawObjectFromPoints(width: number, height: number, camera: Camera, points: ReadonlyVec3[], closed = true, angles = true, generateLineLabels = false): DrawProduct | undefined {\n    return getDrawObjectFromPointArray(width, height, camera, points, closed, angles, generateLineLabels);\n  }\n\n  getDrawText(width: number, height: number, camera: Camera, points: ReadonlyVec3[], text: string): DrawProduct | undefined {\n    return getDrawTextObject(width, height, camera, points, text);\n  }\n\n  traceDrawObjects(objects: DrawProduct[], line: { start: ReadonlyVec2, end: ReadonlyVec2 }): DrawProduct {\n    return getTraceDrawOject(objects, line);\n  }\n\n  get2dNormal(object: DrawProduct, line: { start: ReadonlyVec2, end: ReadonlyVec2 }): { normal: ReadonlyVec2, position: ReadonlyVec2 } | undefined {\n    return get2dNormal(object, line);\n  }\n\n\n}\n", "import type { ObjectId } from \"@novorender/measure-api\";\nimport type { ReadonlyVec2, ReadonlyVec3 } from \"gl-matrix\";\n\nexport type PathKind = \"face\" | \"edge\" | \"vertex\" | \"curveSegment\";\n\nexport interface MeasureEntity extends MeasureEntityIndex {\n    ObjectId: ObjectId;\n    kind: \"edge\" | \"face\" | \"vertex\" | \"curveSegment\";\n}\n\nexport interface MeasureEntityIndex {\n    pathKind: PathKind;\n    pathIndex: number;\n    instanceIndex: number;\n    parameter: number | ReadonlyVec2 | ReadonlyVec3;\n}\n\nexport function equalMeasureEntityIndex(a?: MeasureEntityIndex, b?: MeasureEntityIndex) {\n    if ((!a && b) || (a && !b)) {\n        return false;\n    }\n    if (a && b) {\n        return a.pathIndex == b.pathIndex && a.pathKind == b.pathKind;\n    }\n    return true;\n}\n\nexport function equalMeasureEntity(a?: MeasureEntity, b?: MeasureEntity) {\n    if ((!a && b) || (a && !b)) {\n        return false;\n    }\n    if (a && b) {\n        return a.ObjectId == b.ObjectId && a.pathIndex == b.pathIndex && a.pathKind == b.pathKind;\n    }\n    return true;\n}\n", "import {\n  glMatrix,\n  mat4,\n  ReadonlyMat4,\n  ReadonlyVec2,\n  ReadonlyVec3,\n  vec3,\n  vec4,\n} from \"gl-matrix\";\nimport {\n  equalMeasureEntityIndex,\n  MeasureEntity,\n  MeasureEntityIndex,\n  PathKind,\n} from \"./measureEntity\";\nimport { getPathMatrices, toPathPointsFromMatrices } from \"./pathRender\";\nimport type { DrawPart, MeasureSettings, ObjectId } from \"@novorender/measure-api\";\nglMatrix.setMatrixArrayType(Array);\n\nexport interface Path2dInfo {\n  readonly originalIndex: number;\n  readonly path: Path2D;\n  readonly kind: PathKind;\n  readonly instanceIndex: number;\n}\n\nfunction getDir(viewWorldMatrix: ReadonlyMat4) {\n  const dir = vec4.fromValues(0, 0, 1, 0);\n  vec4.transformMat4(dir, dir, viewWorldMatrix);\n  return vec3.fromValues(dir[0], dir[1], dir[2]);\n}\n\ninterface RenderOutputInterface {\n  readonly worldClipMatrix: ReadonlyMat4;\n  readonly viewClipMatrix: ReadonlyMat4;\n  readonly worldViewMatrix: ReadonlyMat4;\n}\n\nexport class MeasureObject {\n  private _renderOutput: RenderOutputInterface | undefined;\n  private facePaths: readonly Path2dInfo[] = [];\n  private edgePaths: readonly Path2dInfo[] = [];\n  private currentDir = vec3.create();\n  private viewDirMatrix = mat4.create();\n\n  selected: MeasureEntityIndex | undefined;\n\n  highlighted: MeasureEntityIndex | undefined;\n  dirty = true;\n\n  constructor(\n    readonly id: ObjectId,\n    readonly getPaths: (\n      worldViewMatrix: ReadonlyMat4\n    ) => Promise<readonly Path2dInfo[]>,\n    readonly getEntitiyDrawObjects: (\n      enitity: MeasureEntity,\n      setting?: MeasureSettings\n    ) => Promise<\n      {\n        vertices: ReadonlyVec3[];\n        drawType: \"lines\" | \"filled\" | \"vertex\" | \"curveSegment\";\n        elevation?: { from: number; to: number; horizontalDisplay: boolean };\n      }[]\n    >,\n    readonly swapCylinderInternal: (\n      entity: MeasureEntity,\n      to: \"inner\" | \"outer\"\n    ) => Promise<number | undefined>,\n    selectedEntity: MeasureEntityIndex | undefined\n  ) {\n    this.selected = selectedEntity;\n  }\n\n  get selectedEntity(): MeasureEntity | undefined {\n    if (this.selected) {\n      return this.createMeasureEntity(this.selected);\n    }\n  }\n\n  get productId(): ObjectId {\n    return this.id;\n  }\n\n  /** Returns a draw object with 2d screen coordinates*/\n  async swapCylinder(to: \"inner\" | \"outer\"): Promise<boolean> {\n    const entity = this.selectedEntity;\n    if (entity) {\n      const faceIdx = await this.swapCylinderInternal(\n        this.createMeasureEntity(entity),\n        to\n      );\n      if (faceIdx != undefined) {\n        this.selected!.pathIndex = faceIdx;\n      }\n    }\n\n    return false;\n  }\n\n  createMeasureEntity(index: MeasureEntityIndex): MeasureEntity {\n    const kind = index.pathKind;\n    return { ...index, ObjectId: this.id, kind };\n  }\n\n  contextTransform(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    renderOutput: RenderOutputInterface\n  ) {\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n    const scale = renderOutput.viewClipMatrix[5] * halfHeight;\n    var translateX = (1 + renderOutput.worldClipMatrix[12]) * halfWidth;\n    var translateY = (1 - renderOutput.worldClipMatrix[13]) * halfHeight;\n    const mat = new DOMMatrix([scale, 0, 0, -scale, translateX, translateY]);\n    context.setTransform(mat);\n    context.lineWidth = 2 / scale;\n  }\n\n  renderPoints(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    points: vec3[]\n  ) {\n    if (this._renderOutput) {\n      const renderOutput = this._renderOutput;\n      this.contextTransform(context, width, height, renderOutput);\n      const scale = (renderOutput.viewClipMatrix[5] * height) / 2;\n      const { viewDirMatrix } = this;\n\n      const rad = 5 / scale;\n      context.fillStyle = \"red\";\n      for (const point of points) {\n        const p = vec3.transformMat4(vec3.create(), point, viewDirMatrix);\n        const [x, y] = p;\n        context.beginPath();\n        context.ellipse(x, y, rad, rad, 0, 0, 2 * Math.PI);\n        context.fill();\n      }\n      context.resetTransform();\n    }\n  }\n\n  renderPaths(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number\n  ) {\n    const { facePaths, edgePaths } = this;\n    const { pathIndex: highlightedIndex, pathKind: highlightedKind } =\n      this.highlighted ?? {};\n    const { pathIndex: selectedIndex, pathKind: selectedKind } =\n      this.selected ?? {};\n\n    if (this._renderOutput) {\n      this.contextTransform(context, width, height, this._renderOutput);\n\n      for (const pathInfo of facePaths) {\n        const { path, originalIndex } = pathInfo;\n        if (highlightedKind == \"face\" && originalIndex === highlightedIndex) {\n          context.fillStyle = \"yellow\";\n        } else if (selectedKind == \"face\" && originalIndex === selectedIndex) {\n          context.fillStyle = \"green\";\n        } else {\n          context.fillStyle = \"darkgray\";\n        }\n        context.fill(path);\n        context.strokeStyle = \"white\";\n        context.stroke(path);\n      }\n\n      for (const pathInfo of edgePaths) {\n        const { path, originalIndex } = pathInfo;\n\n        if (highlightedKind == \"edge\" && originalIndex === highlightedIndex) {\n          context.strokeStyle = \"yellow\";\n        } else if (selectedKind == \"edge\" && originalIndex === selectedIndex) {\n          context.strokeStyle = \"green\";\n        } else {\n          context.strokeStyle = \"black\";\n        }\n        context.stroke(path);\n      }\n\n      context.resetTransform();\n    }\n    this.dirty = false;\n  }\n\n  hover(\n    context: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): boolean {\n    const idx = this.pickPath(context, x, y, width, height);\n    if (equalMeasureEntityIndex(this.highlighted, idx)) {\n      return false;\n    }\n    this.highlighted = idx;\n    this.dirty = true;\n    return true;\n  }\n\n  select(): boolean {\n    if (\n      equalMeasureEntityIndex(this.highlighted, this.selected) ||\n      !this.highlighted\n    ) {\n      return false;\n    }\n    this.selected = this.highlighted;\n    this.dirty = true;\n    return true;\n  }\n\n  private pickPath(\n    context: CanvasRenderingContext2D,\n    x: number,\n    y: number,\n    width: number,\n    height: number\n  ): MeasureEntityIndex | undefined {\n    if (this._renderOutput) {\n      this.contextTransform(context, width, height, this._renderOutput);\n\n      const { facePaths, edgePaths } = this;\n\n      for (let i = edgePaths.length - 1; i >= 0; --i) {\n        const pathInfo = edgePaths[i];\n        const { path } = pathInfo;\n        if (context.isPointInStroke(path, x, y)) {\n          return {\n            pathKind: \"edge\",\n            pathIndex: pathInfo.originalIndex,\n            instanceIndex: pathInfo.instanceIndex,\n            parameter: 0,\n          };\n        }\n      }\n\n      for (let i = facePaths.length - 1; i >= 0; --i) {\n        const pathInfo = facePaths[i];\n        const { path } = pathInfo;\n        if (context.isPointInPath(path, x, y)) {\n          return {\n            pathKind: \"face\",\n            pathIndex: pathInfo.originalIndex,\n            instanceIndex: pathInfo.instanceIndex,\n            parameter: 0,\n          };\n        }\n      }\n    }\n    context.resetTransform();\n  }\n}\n"],
  "mappings": "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",
  "names": ["obj", "returnValue", "proxy", "equals", "len", "scale", "equals", "add", "clone", "copy", "create", "equals", "exactEquals", "fromValues", "mul", "multiply", "rotateX", "rotateY", "rotateZ", "scale", "set", "str", "sub", "subtract", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "scale", "len", "rotateX", "rotateY", "rotateZ", "str", "exactEquals", "equals", "sub", "mul", "add", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat4", "transformQuat", "zero", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "lerp", "random", "transformMat4", "transformQuat", "zero", "str", "exactEquals", "equals", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "add", "angle", "ceil", "clone", "copy", "create", "cross", "dist", "distance", "div", "divide", "dot", "equals", "exactEquals", "floor", "forEach", "fromValues", "inverse", "len", "length", "lerp", "max", "min", "mul", "multiply", "negate", "normalize", "random", "rotate", "round", "scale", "scaleAndAdd", "set", "sqrDist", "sqrLen", "squaredDistance", "squaredLength", "str", "sub", "subtract", "transformMat3", "transformMat4", "zero", "create", "clone", "fromValues", "copy", "set", "add", "subtract", "multiply", "divide", "ceil", "floor", "min", "max", "round", "scale", "scaleAndAdd", "distance", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "lerp", "random", "transformMat3", "transformMat4", "rotate", "angle", "zero", "str", "exactEquals", "equals", "sub", "mul", "div", "dist", "sqrDist", "sqrLen", "forEach", "a", "b", "len", "length", "dir", "total", "polygon", "dist", "angle", "s", "angle", "dist", "line", "parts", "drawObjects", "ortho", "_p", "v", "scale"]
}
