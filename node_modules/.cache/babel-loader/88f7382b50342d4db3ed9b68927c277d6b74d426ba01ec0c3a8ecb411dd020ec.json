{"ast":null,"code":"export async function main(api, canvas) {\n  // create a view\n  const view = await api.createView({\n    background: {\n      color: [0, 0, 0, 0]\n    }\n  }, canvas);\n\n  // provide a camera controller\n  view.camera.controller = api.createCameraController({\n    kind: \"turntable\"\n  });\n\n  // load the Condos demo scene\n  view.scene = await api.loadScene(\"https://api.novorender.com/assets/scenes/18f56c98c1e748feb8369a6d32fde9ef/\");\n\n  // create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // main render loop\n  while (true) {\n    // handle canvas resizes\n    const {\n      clientWidth,\n      clientHeight\n    } = canvas;\n    view.applySettings({\n      display: {\n        width: clientWidth,\n        height: clientHeight\n      }\n    });\n\n    // render frame\n    const output = await view.render();\n    {\n      // finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // display in canvas\n        ctx === null || ctx === void 0 ? void 0 : ctx.transferFromImageBitmap(image);\n        image.close();\n      }\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["main","api","canvas","view","createView","background","color","camera","controller","createCameraController","kind","scene","loadScene","ctx","getContext","clientWidth","clientHeight","applySettings","display","width","height","output","render","image","getImage","transferFromImageBitmap","close"],"sources":["/Users/nanhomkham/IdeaProjects/novorender-ui/src/scenes/condos.ts"],"sourcesContent":["import { API, createAPI, WellKnownSceneUrls } from \"@novorender/webgl-api\";\n\nexport async function main(api: API, canvas: HTMLCanvasElement): Promise<boolean> {\n  // create a view\n  const view = await api.createView({ background: { color: [0, 0, 0, 0] } }, canvas);\n\n  // provide a camera controller\n  view.camera.controller = api.createCameraController({ kind: \"turntable\" });\n\n  // load the Condos demo scene\n  view.scene = await api.loadScene(\"https://api.novorender.com/assets/scenes/18f56c98c1e748feb8369a6d32fde9ef/\");\n\n  // create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // main render loop\n  while (true) {\n    // handle canvas resizes\n    const { clientWidth, clientHeight } = canvas;\n    view.applySettings({\n      display: { width: clientWidth, height: clientHeight },\n    });\n\n    // render frame\n    const output = await view.render();\n    {\n      // finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // display in canvas\n        ctx?.transferFromImageBitmap(image);\n        image.close();\n      }\n    }\n  }\n  return true\n}"],"mappings":"AAEA,OAAO,eAAeA,IAAIA,CAACC,GAAQ,EAAEC,MAAyB,EAAoB;EAChF;EACA,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,UAAU,CAAC;IAAEC,UAAU,EAAE;MAAEC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAAE;EAAE,CAAC,EAAEJ,MAAM,CAAC;;EAElF;EACAC,IAAI,CAACI,MAAM,CAACC,UAAU,GAAGP,GAAG,CAACQ,sBAAsB,CAAC;IAAEC,IAAI,EAAE;EAAY,CAAC,CAAC;;EAE1E;EACAP,IAAI,CAACQ,KAAK,GAAG,MAAMV,GAAG,CAACW,SAAS,CAAC,4EAA4E,CAAC;;EAE9G;EACA,MAAMC,GAAG,GAAGX,MAAM,CAACY,UAAU,CAAC,gBAAgB,CAAC;;EAE/C;EACA,OAAO,IAAI,EAAE;IACX;IACA,MAAM;MAAEC,WAAW;MAAEC;IAAa,CAAC,GAAGd,MAAM;IAC5CC,IAAI,CAACc,aAAa,CAAC;MACjBC,OAAO,EAAE;QAAEC,KAAK,EAAEJ,WAAW;QAAEK,MAAM,EAAEJ;MAAa;IACtD,CAAC,CAAC;;IAEF;IACA,MAAMK,MAAM,GAAG,MAAMlB,IAAI,CAACmB,MAAM,CAAC,CAAC;IAClC;MACE;MACA,MAAMC,KAAK,GAAG,MAAMF,MAAM,CAACG,QAAQ,CAAC,CAAC;MACrC,IAAID,KAAK,EAAE;QACT;QACAV,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEY,uBAAuB,CAACF,KAAK,CAAC;QACnCA,KAAK,CAACG,KAAK,CAAC,CAAC;MACf;IACF;EACF;EACA,OAAO,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}