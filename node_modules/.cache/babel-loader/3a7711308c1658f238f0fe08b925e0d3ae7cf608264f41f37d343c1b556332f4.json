{"ast":null,"code":"export async function main({\n  webglApi,\n  canvas\n}) {\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // Create a view\n  const view = await api.createView({\n    background: {\n      color: [0, 0, 0, 0]\n    }\n  }, canvas);\n\n  // load a predefined scene into the view, available scenes are cube, oilrig, condos\n  view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos);\n\n  // provide a camera controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({\n    kind: \"turntable\"\n  });\n\n  // Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // Handle canvas resizes\n  new ResizeObserver(entries => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: {\n          width: canvas.width,\n          height: canvas.height\n        }\n      });\n    }\n  }).observe(canvas);\n\n  // render loop: https://dens.website/tutorials/webgl/render-loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx === null || ctx === void 0 ? void 0 : ctx.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    output.dispose();\n  }\n}","map":{"version":3,"names":["main","webglApi","canvas","api","createAPI","view","createView","background","color","scene","loadScene","WellKnownSceneUrls","condos","camera","controller","createCameraController","kind","ctx","getContext","ResizeObserver","entries","entry","width","contentRect","height","applySettings","display","observe","output","render","image","getImage","transferFromImageBitmap","close","dispose"],"sources":["/Users/nanhomkham/IdeaProjects/novorender-ui/src/scenes/condos.ts"],"sourcesContent":["export async function main({ webglApi, canvas }: IParams) {\n  // initialize the webgl api\n  const api = webglApi.createAPI();\n\n  // Create a view\n  const view = await api.createView({ background: { color: [0, 0, 0, 0] } }, canvas);\n\n  // load a predefined scene into the view, available scenes are cube, oilrig, condos\n  view.scene = await api.loadScene(webglApi.WellKnownSceneUrls.condos);\n\n  // provide a camera controller, available controller types are static, orbit, flight and turntable\n  view.camera.controller = api.createCameraController({ kind: \"turntable\" });\n\n  // Create a bitmap context to display render output\n  const ctx = canvas.getContext(\"bitmaprenderer\");\n\n  // Handle canvas resizes\n  new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      canvas.width = entry.contentRect.width;\n      canvas.height = entry.contentRect.height;\n      view.applySettings({\n        display: { width: canvas.width, height: canvas.height },\n      });\n    }\n  }).observe(canvas);\n\n  // render loop: https://dens.website/tutorials/webgl/render-loop\n  while (true) {\n    // Render frame\n    const output = await view.render();\n    {\n      // Finalize output image\n      const image = await output.getImage();\n      if (image) {\n        // Display the given ImageBitmap in the canvas associated with this rendering context.\n        ctx?.transferFromImageBitmap(image);\n        // release bitmap data\n        image.close();\n      }\n    }\n    (output as any).dispose();\n  }\n}\n"],"mappings":"AAAA,OAAO,eAAeA,IAAIA,CAAC;EAAEC,QAAQ;EAAEC;AAAgB,CAAC,EAAE;EACxD;EACA,MAAMC,GAAG,GAAGF,QAAQ,CAACG,SAAS,CAAC,CAAC;;EAEhC;EACA,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,UAAU,CAAC;IAAEC,UAAU,EAAE;MAAEC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAAE;EAAE,CAAC,EAAEN,MAAM,CAAC;;EAElF;EACAG,IAAI,CAACI,KAAK,GAAG,MAAMN,GAAG,CAACO,SAAS,CAACT,QAAQ,CAACU,kBAAkB,CAACC,MAAM,CAAC;;EAEpE;EACAP,IAAI,CAACQ,MAAM,CAACC,UAAU,GAAGX,GAAG,CAACY,sBAAsB,CAAC;IAAEC,IAAI,EAAE;EAAY,CAAC,CAAC;;EAE1E;EACA,MAAMC,GAAG,GAAGf,MAAM,CAACgB,UAAU,CAAC,gBAAgB,CAAC;;EAE/C;EACA,IAAIC,cAAc,CAAEC,OAAO,IAAK;IAC9B,KAAK,MAAMC,KAAK,IAAID,OAAO,EAAE;MAC3BlB,MAAM,CAACoB,KAAK,GAAGD,KAAK,CAACE,WAAW,CAACD,KAAK;MACtCpB,MAAM,CAACsB,MAAM,GAAGH,KAAK,CAACE,WAAW,CAACC,MAAM;MACxCnB,IAAI,CAACoB,aAAa,CAAC;QACjBC,OAAO,EAAE;UAAEJ,KAAK,EAAEpB,MAAM,CAACoB,KAAK;UAAEE,MAAM,EAAEtB,MAAM,CAACsB;QAAO;MACxD,CAAC,CAAC;IACJ;EACF,CAAC,CAAC,CAACG,OAAO,CAACzB,MAAM,CAAC;;EAElB;EACA,OAAO,IAAI,EAAE;IACX;IACA,MAAM0B,MAAM,GAAG,MAAMvB,IAAI,CAACwB,MAAM,CAAC,CAAC;IAClC;MACE;MACA,MAAMC,KAAK,GAAG,MAAMF,MAAM,CAACG,QAAQ,CAAC,CAAC;MACrC,IAAID,KAAK,EAAE;QACT;QACAb,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEe,uBAAuB,CAACF,KAAK,CAAC;QACnC;QACAA,KAAK,CAACG,KAAK,CAAC,CAAC;MACf;IACF;IACCL,MAAM,CAASM,OAAO,CAAC,CAAC;EAC3B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}